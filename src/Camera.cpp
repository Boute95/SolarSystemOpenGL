#include <solar/Camera.hpp>
#include <glimac/SDLWindowManager.hpp>


///////////////////////////////////////////////////////////////////////////////
solar::Camera::Camera(float iAspectRatio) : aspectRatio(iAspectRatio), transformMatrix() {}



///////////////////////////////////////////////////////////////////////////////
void solar::Camera::translate(const glm::vec3& v) {
    transformMatrix = glm::translate(transformMatrix, v);
}



///////////////////////////////////////////////////////////////////////////////
void solar::Camera::rotate(const float angle, const glm::vec3& axis) {
    transformMatrix = glm::rotate(transformMatrix, angle, axis);
}



///////////////////////////////////////////////////////////////////////////////
void solar::Camera::scale(const glm::vec3& v) {
    transformMatrix = glm::scale(transformMatrix, v);
}



///////////////////////////////////////////////////////////////////////////////
void solar::Camera::resetTransforms() {
    transformMatrix = glm::mat4();
}



///////////////////////////////////////////////////////////////////////////////
glm::mat4 solar::Camera::getTransformMatrix() const {
    return transformMatrix;
}



///////////////////////////////////////////////////////////////////////////////
glm::mat4 solar::Camera::getProjMatrix() const {
    return glm::perspective(45.f, aspectRatio, float(1e4), float(1e12));
}



///////////////////////////////////////////////////////////////////////////////
glm::mat4 solar::Camera::getViewMatrix() const {
    return transformMatrix;
}

